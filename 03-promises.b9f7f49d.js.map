{"mappings":"oeAAAA,EAAA","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction generatePromises() {\n  const amount = parseInt(document.getElementById('amount').value, 10);\n  const initialDelay = parseInt(\n    document.getElementById('initialDelay').value,\n    10\n  );\n  const step = parseInt(document.getElementById('step').value, 10);\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    const delay = initialDelay + (i - 1) * step;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.Success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.Failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["parcelRequire"],"version":3,"file":"03-promises.b9f7f49d.js.map"}