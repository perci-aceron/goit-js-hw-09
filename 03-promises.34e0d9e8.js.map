{"mappings":"AAAA,SAASA,EAAcC,EAAMC,GAC3B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLL,GAAQ,IACVG,EAAQ,CAAEG,SAAUN,E,MAAMC,IAE1BG,EAAO,CAAEE,SAAUN,E,MAAMC,GAAQ,GAElCD,EAAK,G,CAIZO,SAASC,OAAOC,KAAK,CACnBC,MAAO,QACPJ,SAAU,YACVK,SAAU,OACVC,QAAS,EACTC,aAAc,MACdC,KAAK,EACLC,QAAS,IACTC,iBAAkB,IAClBC,aAAa,EACbC,iBAAkB,kBAClBC,WAAW,EACXC,oBAAoB,EACpBC,cAAc,EACdC,GAAI,iBACJC,UAAW,kBACXC,OAAQ,KACRC,eAAe,EACfC,WAAY,YACZC,SAAU,OACVC,cAAc,EACdC,qBAAsB,IACtBC,kBAAmB,OACnBC,aAAa,EACbC,SAAS,EACTC,gBAAgB,IAuBlBC,SAASC,eAAe,SAASC,iBAAiB,SApBlD,WACE,MAAMC,EAAaH,SAASC,eAAe,SACrCG,EAAcJ,SAASC,eAAe,UAEtCI,EAAQC,SAASH,EAAWpC,OAC5BwC,EAASD,SAASF,EAAYrC,OAEpC,IAAK,IAAIyC,EAAI,EAAGA,EAAID,EAAQC,IAAK,CACf3C,EAAcwC,EAAQG,EAAGH,GAASG,EAAI,IAGnDC,MAAK,EAACrC,SAAEA,EAAQL,MAAEA,MACjBM,SAASC,OAAOoC,QAAQ,qBAAqBtC,QAAeL,MAAU,IAEvE4C,OAAM,EAACvC,SAAEA,EAAQL,MAAEA,MAClBM,SAASC,OAAOsC,QAAQ,oBAAoBxC,QAAeL,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(time, value) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (time <= 2000) {\n        resolve({ position: time, value });\n      } else {\n        reject({ position: time, value });\n      }\n    }, time);\n  });\n}\n\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'right-top',\n  distance: '10px',\n  opacity: 1,\n  borderRadius: '5px',\n  rtl: false,\n  timeout: 3000,\n  messageMaxLength: 110,\n  backOverlay: false,\n  backOverlayColor: 'rgba(0,0,0,0.5)',\n  plainText: true,\n  showOnlyTheLastOne: false,\n  clickToClose: false,\n  ID: 'NotiflixNotify',\n  className: 'notiflix-notify',\n  zindex: 4001,\n  useGoogleFont: false,\n  fontFamily: 'Quicksand',\n  fontSize: '13px',\n  cssAnimation: true,\n  cssAnimationDuration: 400,\n  cssAnimationStyle: 'fade',\n  closeButton: false,\n  useIcon: true,\n  useFontAwesome: false,\n});\n\nfunction callCreatePromise() {\n  const delayInput = document.getElementById('delay');\n  const amountInput = document.getElementById('amount');\n\n  const delay = parseInt(delayInput.value);\n  const amount = parseInt(amountInput.value);\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(delay * i, delay * (i + 1));\n\n    promise\n      .then(({ position, value }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${value}ms`);\n      })\n      .catch(({ position, value }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${value}ms`);\n      });\n  }\n}\n\ndocument.getElementById('start').addEventListener('click', callCreatePromise);\n"],"names":["$47d4ff9957288465$var$createPromise","time","value","Promise","resolve","reject","setTimeout","position","Notiflix","Notify","init","width","distance","opacity","borderRadius","rtl","timeout","messageMaxLength","backOverlay","backOverlayColor","plainText","showOnlyTheLastOne","clickToClose","ID","className","zindex","useGoogleFont","fontFamily","fontSize","cssAnimation","cssAnimationDuration","cssAnimationStyle","closeButton","useIcon","useFontAwesome","document","getElementById","addEventListener","delayInput","amountInput","delay","parseInt","amount","i","then","success","catch","failure"],"version":3,"file":"03-promises.34e0d9e8.js.map"}